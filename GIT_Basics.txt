START

Consult the video: https://www.youtube.com/watch?v=8JJ101D3knE
                https://www.youtube.com/watch?v=S7XpTAnSDL4
CONSULT THE DOCUMENTATION: https://git-scm.com/docs
or the cheatsheet: https://education.github.com/git-cheat-sheet-education.pdf

- echo commands
    + "> [file_name]" -> Create a [file_name] (Remember to include .txt, .py, .ipynb, etc.)
    + ">> [Msg] [file_name]" -> Append [Msg] to file file_name

-------------------
- git commands
Q -> Exit               
R -> Refresh
T -> Tag 
There are 3 Stages, Working dir -> Staging Area -> Commit (3 Environments)
    Use add to add file to Stage
    Use commit to add file FROM stage to Commit
        If you modify a file, Stage will contain THE OLD VERSION of the file you modified
            => If you commit, you will commit the OLD VERSION and not the new one you modified
            => You HAVE to add the modify file to the Stage to update init
        *If you remove a file, that file you deleted will STILL BE in Stage
        *To remove it, use git -add [that exact file] to Stage and it will delete it there

    + "-init" -> Add .git file, don't remove, if remove lose all history

    + "status" -> Red: Not In Stage | Green: In Stage
                    Check if everything is in Stage/Committed.
                    Check if files have been Modified or Deleted
        + "status -s" -> Red M on Right Side: modified in repo but that change not in staging area
                         Green M on Left Side: All the changes in repo is now in staging area
                         Green M on Left, Red M on Right: Changes in Staging Area, changes
                                                                    in repo but not added to staging area
                         Double Red ? (??): New file, not in Staging Area and newly added to repo
                         Green A on Left: Added to Staging Area
                        *Right Column/Side -> Working directory/repo
                        *Left Column/Side -> Staging Area
                        *M: Modified
                        *A: Added

    + "stage [file_name]" -> Add [file_name] to Stage
            (Literally add)

    + "add [file_name]" -> Add file_name to Stage
        "-add ." -> Add all files
        "-add *[file_type]" -> Add all files with type == [file_type]

    + "commit -m "[commit_msg]" " -> Add files to Commit with msg = [commit_msg]
        + "commit" -> Open the COMMIT_EDITMSG file, you can see the files in Stage and newly edited file
        + "commit -a" -> Commit all Files (No msg) | Skip Staging 
        + "commit -am [commit_msg]" -> Commit all Files (With msg) | Skip Staging

    + "mv [old_file_name] [new_file_name]" -> Change [old_file_name] to [new_file_name] (Staged)
                                                        (You can even change the type)
        * You have to commit the changes to stage first AND THEN change the file name
        * The [new_file_name] will be tracked IMMEDIATELY
        * If you renamed and don't commit, and then modify it, [old_file_name]
                                            will be created along with [new_file_name]

    + "ls-files" -> Files in the Staging Area
        "ls-tree HEAD~[number]" -> List all files in a tree stuct
        Commits
        Blobs -> Files
        Trees -> Directories
        Tags
    
    + "rm [file1] [file2] [...]" -> Remove file from repo + staging Area
        + "rm *.[file_type]" -> Remove all file with type = [file_type] from working directory + staging Area
        + "rm ." -> Remove all files from repo + staging Area

    + "rm --cached [file_to_remove]" -> Only remove from staging area (or Index by oldheads)
        + "rm --cached -r [file_to_remove]" -> Only remove from staging area (recursive removal)
                * REMEMBER TO COMMIT THE REMOVE

    + "diff --staged" -> Showcase what we have in Staging Area that's going to commit (use visual tools instead)
                        comparing a/[file_name] to b/[file_name]: a means the old file, b means the new file
                         index: metadata
                         Changes in old file is indicated by - / minus sign 
                         Changes in new file is indicated by + / plus sign 
                         @@ @@ header: - / minus sign indicates old copy
                                        + / plus sign indicates new copy
                            Ex: -1, 3 -> Starting from 1st line, 3 Lines have been extracted (old file)
                                +1, 5 -> Starting frm 1st line, 5 Lines have been extracted (new file)
                         +[green_color] -> Added lines to the new copy
                         *If there are multiple files, after comparing 1st file, moves to 2nd
                         If you create a new file:
                            new file mode [id]
                            index: metadata
                            Since we create new file, there's NO old file
                                It will display --- /dev/null
                        @@ -0,0 +1@@ Starting from line 0, 0 lines have been extracted since there was no file
                                    One line has been added to the new file
            "diff" -> Comparing work dir to staging area
                            Same thing as diff --staged
                            -[red_color] -> This line has been changed
            "difftool" -> Visual Tool, open difftool to compare work dir files thats going to staging area 
            "difftool --staged" -> open difftool to compare staging area files thats going to commit

    + "log" -> Look up Commits History, Latest to Earliest
        "log --oneline" -> Log but summarized
        "log --oneline --reverse" -> Basically log but from Earliest to Latest

    + "show [ID of Commit]" -> Show the author, files changed and what changed
        "show HEAD~[number]" -> Start from head, move [number] lines after HEAD, basically index of Commits
        "SHOW HEAD~[number]:[file]" -> Show specific file in [number] commit

    + "restore --staged [file]" -> Replace file in staging area w/ its last snapshot
        "restore --staged ." -> Replace ALL file in staging area w/ its last snapshot
        "restore --staged *.[file_type]" -> Replace file with type = [file_type] in staging area w/ its last snapshot
            *If you restore a FILE that has no snapshot -> Delete that file from staging area
    
    + "restore [file]" -> Replace [file] in working dir with [file] in staging area
        "restore ." -> Replace all [file] in working dir with [file] in staging area
        "restore *.[file_type]" -> Replace file with type = [file_type] in working dir with [file] in staging area
            *If you try to restore a newly added file not in repo or staging
                        -> Git dont have snapshot so it can't restore
                        -> "git clean" to remove this untracked file

    + "restore --source=[The commit you wanna revert to] [file]"
                                -> Restore [file] to its version in [The commit you wanna revert to]

    detached HEAD -> Head pointer no longer points to latest branch commit
    + "checkout [snapshot/history ID]" -> Move to [snapshot/history ID] (past states)
                                        => You can go back to the versions BEFORE and make changes there
                                                (Or revert back to this version by making another branch and merge)
    + "checkout main/master" -> Switch to the LATEST version
                                can do git checkout -f main/master to force to latest version from detached head
    + "branch -M [new_name]" -> Change the current branch name to [new_name] 
--------------
Github:
    Local Repo: Stuff in your Device (git -init creaes local repo)
    Remote Repo: Stuff stored in a server (hence remote, any1 can access)
    
    + "remote add origin [link 2 remote repo]" -> Clone entire remote repo
            *Origin is a another word for [link 2 remote repo]
            
    + "push -u origin [branch]" -> Push origin/remote repo to [branch]

    + "checkout branch [branch_name]" -> Create new branch [branch_name] from the branch you're creating it in
                                        => If you create [branch_name] from main, [branch_name] will have files of main
                                => If you create a new branch from [branch_name], new branch will have files of [branch_name]

    + "push --set-upstream origin [branch_name]" -> Link local [branch_name] to the remote [branch_name]
                                                        => Pushing the local branch to remote
                - Or you can do "git push -u origin [branch]"
                - After estalishing a connection then u can just do "git push" like normal
                Remember to do "git push" (push is to push to remote repo)
                                and not "git commit" (git commit is for local)
                    Do "git commit" first then push tho

    + "pull" -> If somebody made changes to your remote branch that you're tracking with your local branch
                    do "git pull" To fetch changes from that remote branch to local branch

    + "branch [branch you wanna branch from] [the new branch name]" -> Create a branch from [branch u wanna branch from]
                                                                                named [the new branch name]
    + "checkout [branch_name]" -> Switch to branch [branch_name]
    + "checkout -b [branch_name]" Create branch [branch_name] and move to it immediately

Branches: Branch out from main, what u changed in branch will not be changed in main
                                                            (until u merge)
Once you've made all changes and tested that it works in the branch, you wanna merge to main branch
        -> Open a Pull Request
        -> Share changes with team for review and feedback -> Approved and Merge to main

---------------
- Other Commands:
    + "ls" -> List all files in working directory

    + "rm [file_name]" -> Remove file_name (only from working dir)

    + "mv [old_file_name] [new_file_name]" -> Change [old_file_name] to [new_file_name] (Unstaged)
            * The [new_file_name] will NOT be tracked so you gotta add it IMMEDIATELY to Staging
            * If you renamed and don't add, and then modify it, [old_file_name]
                                            will be created along with [new_file_name]
                => You gotta do git -add [old_file_name] to remove that old file
                        then do git -add [new_file_name] to start tracking the renamed file

    "mkdir [dir_name]" -> Create directory name [dir_name]

    "cd [dir_name]" -> Change directory to [dir_name]

---------
.gitignore:
    - Will ignore the files written in it (If you modify the file in gitignore,
                                                            git will ignore the modification)
            + Does not add to staging (even if use add all)
            + Does not commit them (even if use commit all)
        * If you add a file to staging area and commit it
        * If you THEN add that file to gitignore, it will still stay in the staging area
        * And ANY changes made to that file will count as a modification
                        -> Gotta add it to staging area and COMMIT IT.
                        -> We gotta delete it from the staging area

ALWAYS REVIEW WHAT U HAVE IN STAGING AREA B4 COMMIT